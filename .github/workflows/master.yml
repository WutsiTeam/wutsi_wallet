name: master

on:
  push:
    branches:
      - master

env:
  FLUTTER_VERSION: "3.0.5"
  PROPERTIES_PATH: "./android/key.properties"
  #--------------------------
  # SECRETS
  #--------------------------
  KEY_STORE: "wutsiwutsi"
  KEY_PASSWORD: "wutsiwutsi"
  KEY_ALIAS: "upload"
  KEY_FILE: "../keystore/upload-keystore2.jks"
  KEYSTORE: "${{secrets.KEYSTORE}}"
  GOOGLE_SERVICE_JSONKEY: "${{secrets.GOOGLE_SERVICE_JSONKEY}}"

jobs:
  #--------------------------
  # BUILD RELEASE VERSION
  #--------------------------
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}

      - name: Install dependencies
        run: flutter pub get

      # Creating the key.properties file
      - name: Creating key.properties
        run: |
          echo keyPassword=\${{ env.KEY_STORE }} > ${{env.PROPERTIES_PATH}}
          echo storePassword=\${{ env.KEY_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
          echo keyAlias=\${{ env.KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}
          echo storeFile=\${{ env.KEY_FILE }} >> ${{env.PROPERTIES_PATH}}
          echo "${{ env.KEYSTORE }}" | base64 --decode > ./android/keystore/upload-keystore2.jks

      - name: Build
        run: |
          flutter analyze
          flutter test
          flutter build apk --no-tree-shake-icons
          flutter build appbundle --no-tree-shake-icons

      - name: Deploy APK
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          aws s3 sync \
            --acl public-read \
            --region us-east-1 \
            build/app/outputs/flutter-apk/ s3://int-wutsi/releases

      - name: Deploy AAB
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          aws s3 sync \
            --acl public-read \
            --region us-east-1 \
            build/app/outputs/bundle/release s3://int-wutsi/releases

      # Make appbundle downloadable
      - name: Upload app bundle
        uses: actions/upload-artifact@v3
        with:
          name: appbundle
          path: build/app/outputs/bundle/release

      - name: Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ always() }}
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: wutsi_wallet
          SLACK_MESSAGE: Build
          MSG_MINIMAL: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  #--------------------------
  # RELEASE
  #--------------------------
  release_internal:
    name: Release Artifacts to internal testing track
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get APPBUNDLE from Artifacts
        uses: actions/download-artifact@v3
        with:
          name: appbundle

      - name: Create Google play config file
        run: |
          echo "${{env.GOOGLE_SERVICE_JSONKEY}}" > play_config.json.b64
          base64 -d -i play_config.json.b64 > play_config.json

      - name: Release APPBUNDLE to internal track
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: play_config.json
          packageName: com.wutsi.wutsi_wallet
          releaseFile: app-release.aab
          track: internal
          status: draft
          whatsNewDirectory: distribution/whatsnew

      - name: Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ always() }}
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: wutsi_wallet
          SLACK_MESSAGE: Realease to Google Store
          MSG_MINIMAL: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
